from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message

from db_api.commands.notes import \
    select_description_search_notes, select_all_notes
from keyboards.start import keyboard_start
from states.search_notes import Search_notes


# –§—É–Ω–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç üîé–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏
async def search_note(message: Message):
    if not await select_all_notes(message.from_user.id):
        return await message.answer(" ‚ùå–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
    else:
        await Search_notes.keyword.set()
        return await message.answer(" üëá–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏")


# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å–∫–∞ –ø–æ —Ñ—Ä–∞–∑–µ
async def search_note_keyword(message: Message, state: FSMContext):
    await state.finish()
    keyboard = keyboard_start()
    keyword = message.text
    if not await select_description_search_notes(user_id=message.from_user.id, keyword=keyword):
        return await message.answer(" ‚ùå–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=keyboard)
    else:
        for note in await select_description_search_notes(user_id=message.from_user.id, keyword=keyword):
            await message.answer(f" <b>–ù–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏: {note.id}</>\n"
                                 f" <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫: {note.title}</>\n"
                                 f" <i>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {note.description}</>", reply_markup=keyboard)


# –†–µ–≥–∏—Å—Ç–µ—Ä –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
def register_search_notes(dp: Dispatcher):
    dp.register_message_handler(
        search_note,
        Text("üîé–ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏")
    )
    dp.register_message_handler(
        search_note_keyword,
        state=Search_notes.keyword
    )
