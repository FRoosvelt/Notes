from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message

from db_api.commands.notes import select_all_notes, delete_note, select_id_notes
from keyboards.start import keyboard_start
from states.delete_notes import Delete_note


# –§—É–Ω–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç ‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
async def delete_notes_keyboard(message: Message):
    if not await select_all_notes(message.from_user.id):
        return await message.answer(" ‚ùå–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫")
    else:
        await Delete_note.id.set()
        return await message.answer(" üëá–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")


# –§—É–Ω–∫—Ü–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ –±–æ—Ç–µ
async def delete_notes(message: Message, state: FSMContext):
    keyboard = keyboard_start()
    id = message.text
    if not await select_id_notes(user_id=message.from_user.id, id=id):
        await state.finish()
        return await message.answer(" ‚ùå–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–º–µ—Ç–∫–∏", reply_markup=keyboard)
    else:
        await state.finish()
        await delete_note(id=id)
        return await message.answer(" ‚ùå–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=keyboard)


def register_delete_note(dp: Dispatcher):
    dp.register_message_handler(
        delete_notes_keyboard,
        Text("‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    )
    dp.register_message_handler(
        delete_notes,
        state=Delete_note.id
    )
